% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatial_stats.R
\name{calc_spatial_stats}
\alias{calc_spatial_stats}
\title{Calculate spatial statistics}
\usage{
calc_spatial_stats(
  spatial_data = flame_data,
  lat_col = "latitude",
  lon_col = "longitude",
  var_cols = c("BGApc_ugL_tau", "ODO_percent_tau", "pH_tau"),
  id_cols = c("Lake", "Year", "DOY"),
  multiple_cores = TRUE
)
}
\arguments{
\item{spatial_data}{data frame containing spatial locations and measurements of one or more variables; see \code{\link{flame_data}} for default and formatting}

\item{lat_col}{character string, column name for latitude column}

\item{lon_col}{character string, column name for longitude column}

\item{var_cols}{character vector, column names that hold measurements of different variables}

\item{id_cols}{character vector, columns that identify unique sampling events to separate data into before calculating stats independently on, defaults are "Lake", "Year", and "DOY"}

\item{multiple_cores}{TRUE (default) or FALSE, should spatial autocorrelation calculations be run on multiple cores to speed up calculations?}
}
\value{
data frame with calculated spatial stats (SD and Moran's I) for each sample and variable
}
\description{
Calculates spatial early warning statistics (spatial standard deviation and spatial autocorrelation = Moran's I) from a data frame of (optionally multiple) sampling events and variables. By default uses multiple cores to speed up spatial autocorrelation calculation, which can take quite a bit of time depending on how many data points you have.
}
\details{
Note that time estimates printed out are very rough estimates and are based on using the default data and variables, and run on a AMD Ryzen 1800X with 8 cores/16 threads.
}
\examples{
spat_stats = calc_spatial_stats(flame_data)
library(ggplot2)
ggplot(spat_stats \%>\% dplyr::filter(Stat == "SD"), aes(x=DOY, y=Value, color=Lake)) +
   geom_line() +
   facet_grid(rows=vars(Variable), cols=vars(Year), scales="free_y") +
   theme_bw()
}
